---
swagger: "2.0"
info:
  description: "REST API for Topcoder Meta Services.\n\nThis describes a service that\
    \ can give information on other services existing on Topcoder.\n\nAvailable service\
    \ links can be listed by sending GET request. Also, each service can return links\
    \ to further services in their responses.\n\n### Pagination\n  Requests that return\
    \ multiple items will be paginated to 20 items by default. You can specify\n \
    \ further pages with the ```page``` parameter. You can also set a custom page\n\
    \  size up to 100 with the ```perPage``` parameter.\n\n  Pagination response data\
    \ is included in http headers. By Default, the response header contains links\
    \ with ```next```, ```last```, ```first```, ```prev``` resource links.\n"
  version: "5.0.0"
  title: "Topcoder Meta Services REST API"
  termsOfService: "http://topcoder.com/terms/"
  contact:
    url: "http://www.topcoder.com/support"
    email: "support@topcoder.com"
host: "api.topcoder.com"
basePath: "/v5"
tags:
- name: "service"
  description: "Everything about service."
- name: "Events"
  description: "Everything about events."
- name: "Topics"
  description: "Everything about topics."
- name: "Placeholders"
  description: "Everything about placeholders."
- name: "Healthchecks"
  description: "Everything about health checks."
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- Bearer: []
paths:
  /bus/services:
    get:
      tags:
      - "service"
      summary: "Get all services."
      description: "Get all services. Link headers are sent back and they have rel\
        \ set to prev, next, first, last and contain the relevant URL.\n"
      operationId: "getServices"
      parameters:
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        default: 1
      - name: "perPage"
        in: "query"
        description: "The number of items to list per page."
        required: false
        type: "integer"
        default: 20
        maximum: 100
      responses:
        200:
          description: "OK - The request was successful, the resources are returned."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExtendedService"
          headers:
            X-Next-Page:
              type: "integer"
              description: "The index of the next page"
            X-Page:
              type: "integer"
              description: "The index of the current page (starting at 1)"
            X-Per-Page:
              type: "integer"
              description: "The number of items to list per page"
            X-Prev-Page:
              type: "integer"
              description: "The index of the previous page"
            X-Total:
              type: "integer"
              description: "The total number of items"
            X-Total-Pages:
              type: "integer"
              description: "The total number of pages"
            Link:
              type: "string"
              description: "Pagination link header."
        304:
          $ref: "#/definitions/NotModified"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
    head:
      tags:
      - "service"
      summary: "Get only response status and headers information but no response body\
        \ for the endpoint."
      description: "Get response status and headers information for the endpoint.\
        \ The Link header is provided in the header and they have rel set to prev,\
        \ next, first, last and contain the relevant URL. It does not contain response\
        \ body.\n"
      operationId: "headServices"
      parameters:
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        default: 1
      - name: "perPage"
        in: "query"
        description: "The number of items to list per page."
        required: false
        type: "integer"
        default: 20
        maximum: 100
      responses:
        200:
          description: "OK - The request was successful."
          headers:
            X-Next-Page:
              type: "integer"
              description: "The index of the next page"
            X-Page:
              type: "integer"
              description: "The index of the current page (starting at 1)"
            X-Per-Page:
              type: "integer"
              description: "The number of items to list per page"
            X-Prev-Page:
              type: "integer"
              description: "The index of the previous page"
            X-Total:
              type: "integer"
              description: "The total number of items"
            X-Total-Pages:
              type: "integer"
              description: "The total number of pages"
            Link:
              type: "string"
              description: "Pagination link header."
        304:
          description: "Not Modified - Indicates that the resource has not been modified\
            \ since the last request."
        400:
          description: "Bad Request - Request validation error, unable to process\
            \ the request due to an error (e.g., malformed request syntax, size too\
            \ large, invalid request message framing, or deceptive request routing)."
        401:
          description: "Unauthorized - Occurs when the JWT token provided is either\
            \ expired or invalid."
        403:
          description: "Forbidden - The request is not allowed."
        500:
          description: "Server Error - While handling the request something went wrong\
            \ server-side."
      x-swagger-router-controller: "Service"
    post:
      tags:
      - "service"
      summary: "Create a service."
      description: "Create a new service.\n"
      operationId: "createService"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Service"
      responses:
        201:
          $ref: "#/definitions/ExtendedService"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        409:
          $ref: "#/definitions/Conflict"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
  /bus/services/{serviceName}:
    get:
      tags:
      - "service"
      summary: "Get the service."
      description: "Get the service by service name.\n"
      operationId: "getService"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      responses:
        200:
          description: "OK - The request was successful and the resource is returned."
          schema:
            $ref: "#/definitions/ExtendedService"
        304:
          $ref: "#/definitions/NotModified"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        404:
          $ref: "#/definitions/NotFound"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
    head:
      tags:
      - "service"
      summary: "Get only response status and headers information but no response body\
        \ for the endpoint."
      description: "Get response status and headers information for the endpoint.\
        \ It does not contain response body.\n"
      operationId: "headService"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      responses:
        200:
          description: "OK - The request was successful."
        304:
          description: "Not Modified - Indicates that the resource has not been modified\
            \ since the last request."
        400:
          description: "Bad Request - Request validation error, unable to process\
            \ the request due to an error (e.g., malformed request syntax, size too\
            \ large, invalid request message framing, or deceptive request routing)."
        401:
          description: "Unauthorized - Occurs when the JWT token provided is either\
            \ expired or invalid."
        403:
          description: "Forbidden - The request is not allowed."
        404:
          description: "Not Found - The requested resource could not be found."
        500:
          description: "Server Error - While handling the request something went wrong\
            \ server-side."
      x-swagger-router-controller: "Service"
    put:
      tags:
      - "service"
      summary: "Update the service."
      description: "Update the service by service name.\n"
      operationId: "updateService"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ExtendedService"
      responses:
        200:
          description: "OK - The request was successful and the updated resource is\
            \ returned."
          schema:
            $ref: "#/definitions/ExtendedService"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        404:
          $ref: "#/definitions/NotFound"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
    delete:
      tags:
      - "service"
      summary: "Delete the service."
      description: "Delete the service.\n"
      operationId: "deleteService"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      responses:
        204:
          $ref: "#/definitions/NoContent"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        404:
          $ref: "#/definitions/NotFound"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
    patch:
      tags:
      - "service"
      summary: "Partially update the service."
      description: "Allows to partially modify the service with the provided request\
        \ parameters.\n"
      operationId: "patchService"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "The Service entity.\n"
        required: true
        schema:
          $ref: "#/definitions/body"
      responses:
        200:
          description: "OK - The request was successful and the updated resource is\
            \ returned."
          schema:
            $ref: "#/definitions/ExtendedService"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        404:
          $ref: "#/definitions/NotFound"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
  /bus/services/{serviceName}/payloads:
    get:
      tags:
      - "service"
      summary: "Search the service payloads."
      description: "Search payloads for the service.\n"
      operationId: "getServicePayloads"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        default: 1
      - name: "perPage"
        in: "query"
        description: "The number of items to list per page."
        required: false
        type: "integer"
        default: 20
        maximum: 100
      responses:
        200:
          description: "OK - The request was successful, the resources are returned."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Payload"
          headers:
            X-Next-Page:
              type: "integer"
              description: "The index of the next page"
            X-Page:
              type: "integer"
              description: "The index of the current page (starting at 1)"
            X-Per-Page:
              type: "integer"
              description: "The number of items to list per page"
            X-Prev-Page:
              type: "integer"
              description: "The index of the previous page"
            X-Total:
              type: "integer"
              description: "The total number of items"
            X-Total-Pages:
              type: "integer"
              description: "The total number of pages"
            Link:
              type: "string"
              description: "Pagination link header."
        304:
          $ref: "#/definitions/NotModified"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        404:
          $ref: "#/definitions/NotFound"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
    head:
      tags:
      - "service"
      summary: "Get only response status and headers information but no response body\
        \ for the endpoint."
      description: "Get response status and headers information for the endpoint.\
        \ The Link header is provided in the header and they have rel set to prev,\
        \ next, first, last and contain the relevant URL. It does not contain response\
        \ body.\n"
      operationId: "headServicePayloads"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        default: 1
      - name: "perPage"
        in: "query"
        description: "The number of items to list per page."
        required: false
        type: "integer"
        default: 20
        maximum: 100
      responses:
        200:
          description: "OK - The request was successful."
          headers:
            X-Next-Page:
              type: "integer"
              description: "The index of the next page"
            X-Page:
              type: "integer"
              description: "The index of the current page (starting at 1)"
            X-Per-Page:
              type: "integer"
              description: "The number of items to list per page"
            X-Prev-Page:
              type: "integer"
              description: "The index of the previous page"
            X-Total:
              type: "integer"
              description: "The total number of items"
            X-Total-Pages:
              type: "integer"
              description: "The total number of pages"
            Link:
              type: "string"
              description: "Pagination link header."
        304:
          description: "Not Modified - Indicates that the resource has not been modified\
            \ since the last request."
        400:
          description: "Bad Request - Request validation error, unable to process\
            \ the request due to an error (e.g., malformed request syntax, size too\
            \ large, invalid request message framing, or deceptive request routing)."
        401:
          description: "Unauthorized - Occurs when the JWT token provided is either\
            \ expired or invalid."
        403:
          description: "Forbidden - The request is not allowed."
        404:
          description: "Not Found - The requested resource could not be found."
        500:
          description: "Server Error - While handling the request something went wrong\
            \ server-side."
      x-swagger-router-controller: "Service"
    post:
      tags:
      - "service"
      summary: "Create the service payload."
      description: "Create the payload for the given service.\n"
      operationId: "createServicePayload"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Payload"
      responses:
        201:
          description: "Created - The request was successful and the resource is created."
          schema:
            $ref: "#/definitions/Payload"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        404:
          $ref: "#/definitions/NotFound"
        409:
          $ref: "#/definitions/Conflict"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
  /bus/services/{serviceName}/payloads/{payloadName}:
    get:
      tags:
      - "service"
      summary: "Get the service payload."
      description: "Get the payload for the given service.\n"
      operationId: "getServicePayload"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      - name: "payloadName"
        in: "path"
        description: "The payload name."
        required: true
        type: "string"
      responses:
        200:
          description: "OK - The request was successful and the resource is returned."
          schema:
            $ref: "#/definitions/Payload"
        304:
          $ref: "#/definitions/NotModified"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        404:
          $ref: "#/definitions/NotFound"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
    head:
      tags:
      - "service"
      summary: "Get only response status and headers information but no response body\
        \ for the endpoint."
      description: "Get response status and headers information for the endpoint.\
        \ It does not contain response body.\n"
      operationId: "headServicePayload"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      - name: "payloadName"
        in: "path"
        description: "The payload name."
        required: true
        type: "string"
      responses:
        200:
          description: "OK - The request was successful."
        304:
          description: "Not Modified - Indicates that the resource has not been modified\
            \ since the last request."
        400:
          description: "Bad Request - Request validation error, unable to process\
            \ the request due to an error (e.g., malformed request syntax, size too\
            \ large, invalid request message framing, or deceptive request routing)."
        401:
          description: "Unauthorized - Occurs when the JWT token provided is either\
            \ expired or invalid."
        403:
          description: "Forbidden - The request is not allowed."
        404:
          description: "Not Found - The requested resource could not be found."
        500:
          description: "Server Error - While handling the request something went wrong\
            \ server-side."
      x-swagger-router-controller: "Service"
    put:
      tags:
      - "service"
      summary: "Update the service payload."
      description: "Update the payload for the given service.\n"
      operationId: "updateServicePayload"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      - name: "payloadName"
        in: "path"
        description: "The payload name."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Payload"
      responses:
        200:
          description: "OK - The request was successful and the resource is returned."
          schema:
            $ref: "#/definitions/Payload"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        404:
          $ref: "#/definitions/NotFound"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
    delete:
      tags:
      - "service"
      summary: "Delete the service payload."
      description: "Delete the payload for the given service.\n"
      operationId: "deleteServicePayload"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      - name: "payloadName"
        in: "path"
        description: "The payload name."
        required: true
        type: "string"
      responses:
        204:
          $ref: "#/definitions/NoContent"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        404:
          $ref: "#/definitions/NotFound"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
    patch:
      tags:
      - "service"
      summary: "Partially update the payload."
      description: "Allows to partially modify the payload with the provided request\
        \ parameters.\n"
      operationId: "patchServicePayload"
      parameters:
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
      - name: "payloadName"
        in: "path"
        description: "The payload name."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_1"
      responses:
        200:
          description: "OK - The request was successful and the resource is returned."
          schema:
            $ref: "#/definitions/Payload"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        404:
          $ref: "#/definitions/NotFound"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Service"
  /bus/events:
    post:
      tags:
      - "Events"
      summary: "Post event to the message bus."
      description: "Post an event to the message bus.\n"
      operationId: "postEvent"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/EventPayload"
      responses:
        202:
          $ref: "#/definitions/Accepted"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        409:
          $ref: "#/definitions/Conflict"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Events"
  /bus/topics:
    get:
      tags:
      - "Topics"
      summary: "Get topics."
      description: "Get all topic names.\n"
      operationId: "getTopics"
      parameters: []
      responses:
        200:
          description: "OK - The request was successful, the resources are returned."
          schema:
            type: "array"
            example:
            - "notifications.kafka.queue.java.test"
            - "example.kafka.queue.java.test"
            items:
              type: "string"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Topics"
    head:
      tags:
      - "Topics"
      summary: "Get only response status and headers information but no response body\
        \ for the endpoint."
      description: "Get response status and headers information for the endpoint.\
        \ It does not contain response body.\n"
      operationId: "headTopics"
      parameters: []
      responses:
        200:
          description: "OK - The request was successful."
        304:
          description: "Not Modified - Indicates that the resource has not been modified\
            \ since the last request."
        400:
          description: "Bad Request - Request validation error, unable to process\
            \ the request due to an error (e.g., malformed request syntax, size too\
            \ large, invalid request message framing, or deceptive request routing)."
        401:
          description: "Unauthorized - Occurs when the JWT token provided is either\
            \ expired or invalid."
        403:
          description: "Forbidden - The request is not allowed."
        500:
          description: "Server Error - While handling the request something went wrong\
            \ server-side."
      x-swagger-router-controller: "Topics"
  /bus/placeholders:
    delete:
      tags:
      - "Placeholders"
      summary: "Clear placeholders cache."
      description: "Clear the cache for placeholder validation of email topics.\n"
      operationId: "clearPlaceholdersCache"
      parameters: []
      responses:
        204:
          $ref: "#/definitions/NoContent"
        400:
          $ref: "#/definitions/BadRequest"
        401:
          $ref: "#/definitions/Unauthorized"
        403:
          $ref: "#/definitions/Forbidden"
        500:
          $ref: "#/definitions/ServerError"
      x-swagger-router-controller: "Placeholders"
  /bus/health:
    get:
      tags:
      - "Healthchecks"
      summary: "Check API is healthy."
      description: "Check API is healthy.\n"
      operationId: "getHealth"
      parameters: []
      responses:
        200:
          description: "OK - The request was successful."
          schema:
            $ref: "#/definitions/HealthCheckStatus"
        304:
          $ref: "#/definitions/NotModified"
        400:
          $ref: "#/definitions/BadRequest"
        404:
          $ref: "#/definitions/NotFound"
        500:
          $ref: "#/definitions/ServerError"
      security: []
      x-swagger-router-controller: "Healthchecks"
    head:
      tags:
      - "Healthchecks"
      summary: "Get only response status and headers information but no response body\
        \ for the endpoint.\n"
      description: "Get response status and headers information for the endpoint.\
        \ It does not contain response body.\n"
      operationId: "headHealth"
      parameters: []
      responses:
        200:
          description: "OK - The request was successful."
        304:
          description: "Not Modified - Indicates that the resource has not been modified\
            \ since the last request."
        400:
          description: "Bad Request - Request validation error, unable to process\
            \ the request due to an error (e.g., malformed request syntax, size too\
            \ large, invalid request message framing, or deceptive request routing)."
        404:
          description: "Not Found - The requested resource could not be found."
        500:
          description: "Server Error - While handling the request something went wrong\
            \ server-side."
      security: []
      x-swagger-router-controller: "Healthchecks"
  /internal/jobs/clean:
    post:
      tags:
      - "test"
      summary: "Clears automation test data."
      description: "Clear Test Data from automation testing with newman."
      operationId: "clearTestData"
      responses:
        200:
          description: "OK - The request performed, the resources are returned."
      x-swagger-router-controller: "ClearTestData"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  Service:
    required:
    - "baseURL"
    - "commitHash"
    - "description"
    - "name"
    - "payloads"
    - "version"
    properties:
      name:
        type: "string"
        description: "The service name."
      version:
        type: "string"
        description: "The service version."
      commitHash:
        type: "string"
        description: "The service commit hash."
      description:
        type: "string"
        description: "The service description."
      baseURL:
        type: "string"
        description: "The service base URL."
      payloads:
        type: "array"
        description: "The service payloads"
        items:
          $ref: "#/definitions/Payload"
    description: "The Service entity.\n"
    example:
      name: "ap-challenge-service"
      version: "5.0.1"
      commitHash: "b2037acaf982370286b21eca2e40f4353b59e9c9"
      description: "TC Challenge API"
      baseURL: "https://api.topcoder.com/v5/challenges"
      payloads:
      - name: "createEvent"
        topics:
        - "notifications.kafka.queue.java.test"
        payloadMimeType: "application/json"
        payloadFormat: {}
  ExtendedService:
    allOf:
    - type: "object"
      properties:
        serviceId:
          type: "string"
          description: "The service id."
      example:
        serviceId: "59e774dac301ea001249bb22"
    - $ref: "#/definitions/Service"
    description: "The extended service entity.\n"
  Payload:
    required:
    - "payloadFormat"
    - "payloadMimeType"
    - "topics"
    properties:
      id:
        type: "string"
        description: "The payload name."
      topics:
        type: "array"
        description: "The list of topics for a payload."
        items:
          type: "string"
      payloadMimeType:
        type: "string"
        description: "The payload mime type."
      payloadFormat:
        type: "object"
        description: "The payload format."
        properties: {}
    description: "The payload entity.\n"
    example:
      name: "createEvent"
      topics:
      - "notifications.kafka.queue.java.test"
      payloadMimeType: "application/json"
      payloadFormat: {}
  EventPayload:
    type: "object"
    required:
    - "mime-type"
    - "originator"
    - "payload"
    - "timestamp"
    - "topic"
    properties:
      topic:
        type: "string"
        example: "notifications.action.email.project.topic.created"
        description: "Topic name should be a dot separated fully qualified name i.e.\
          \ domain.type.operation.\n"
        pattern: "^([a-zA-Z0-9]+\\.)+[a-zA-Z0-9]+$"
      originator:
        type: "string"
        example: "tc-notifications"
        description: "Service repository name, from where message is published.\n"
      timestamp:
        type: "string"
        format: "date-time"
        example: "2018-04-13T00:00:00Z"
        description: "Timestamp at which message is published. The date-time notation\
          \ as defined by RFC 3339, section 5.6, for example, 2018-04-13T00:00:00Z\n"
      mime-type:
        type: "string"
        example: "application/json"
        description: "Mime-type for 'payload'.\n"
      key:
        type: "string"
        example: "abc123"
        description: "optional field to assure the one partition for 'payload'.\n"
      payload:
        type: "object"
        example:
          data:
            subject: "project topic created"
            name: "name1"
          recipients:
          - "tc@topcoder.com"
          - "tc2@topcoder.com"
          replyTo: ""
        description: "Actual payload depending on mime-type for consumer.\n"
        properties: {}
    description: "The event payload entity."
    example:
      mime-type: "application/json"
      payload:
        data:
          subject: "project topic created"
          name: "name1"
        recipients:
        - "tc@topcoder.com"
        - "tc2@topcoder.com"
        replyTo: ""
      topic: "notifications.action.email.project.topic.created"
      originator: "tc-notifications"
      timestamp: "2018-04-13T00:00:00Z"
  HealthCheckStatus:
    type: "object"
    required:
    - "health"
    properties:
      health:
        type: "string"
        example: "ok"
        description: "Health check status."
        default: "ok"
    description: "Health check response."
    example:
      health: "ok"
  Accepted:
    description: "Accepted - request has been accepted for processing, but the processing\
      \ has not been completed."
  NoContent:
    description: "No Content - The server has successfully fulfilled the request and\
      \ that there is no additional content to send in the response payload body."
  Unauthorized:
    type: "object"
    properties:
      message:
        type: "string"
        example: "Unable to authenticate the user."
        description: "The unauthorized error message."
    description: "The unauthorized error entity."
  NotFound:
    type: "object"
    properties:
      message:
        type: "string"
        example: "A resource with the name could not be found."
        description: "The not found error message."
    description: "The not found error entity."
  NotModified:
    type: "object"
    properties:
      message:
        type: "string"
        example: "There is no need to transfer a representation of the target resource\
          \ because the request indicates that the client, which made the request\
          \ conditional, already has a valid representation."
        description: "The not modified error message."
    description: "The not modified entity."
  ServerError:
    type: "object"
    properties:
      message:
        type: "string"
        example: "Something went wrong while processing your request. We’re sorry\
          \ for the trouble. We’ve been notified of the error and will correct it\
          \ as soon as possible. Please try your request again in a moment."
        description: "The server error message."
    description: "The server error entity."
  BadRequest:
    type: "object"
    properties:
      message:
        type: "string"
        example: "Invalid input."
        description: "The bad request error message."
    description: "The bad request error entity."
  Forbidden:
    type: "object"
    properties:
      message:
        type: "string"
        example: "You are not allowed to access the request."
        description: "The forbidden error message."
    description: "The permission error entity."
  Conflict:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        example: "Creating a resource with a name already exists."
        description: "The conflict error message."
    description: "The conflict error entity."
  body:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The service name."
      version:
        type: "string"
        description: "The service version."
      commitHash:
        type: "string"
        description: "The service commit hash."
      description:
        type: "string"
        description: "The service description."
      baseURL:
        type: "string"
        description: "The service base URL."
      payloads:
        type: "array"
        description: "The service payloads"
        items:
          $ref: "#/definitions/Payload"
    example:
      name: "ap-challenge-service"
      version: "5.0.2"
      commitHash: "a20387acaf982370286b21eca2e40f4353b59e9c9"
  body_1:
    type: "object"
    properties:
      id:
        type: "string"
        description: "The payload name."
      topics:
        type: "array"
        description: "The list of topics for a payload."
        items:
          type: "string"
      payloadMimeType:
        type: "string"
        description: "The payload mime type."
      payloadFormat:
        type: "object"
        description: "The payload format."
        properties: {}
    description: "The payload entity.\n"
    example:
      name: "createEvent"
      topics:
      - "notifications.kafka.queue.java.test"
parameters:
  page:
    name: "page"
    in: "query"
    description: "The page number."
    required: false
    type: "integer"
    default: 1
  perPage:
    name: "perPage"
    in: "query"
    description: "The number of items to list per page."
    required: false
    type: "integer"
    default: 20
    maximum: 100
  serviceName:
    name: "serviceName"
    in: "path"
    description: "The service name."
    required: true
    type: "string"
  payloadName:
    name: "payloadName"
    in: "path"
    description: "The payload name."
    required: true
    type: "string"
